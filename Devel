
#include <stdio.h>
#include <stdlib.h>
#include "driver/gpio.h"
#include "led_strip.h"


/* Use project configuration menu (idf.py menuconfig) to choose the GPIO to blink,
   or you can edit the following line and set a number here.
*/

#define BLINK_GPIO 2
#define input_state 22
static uint8_t s_led_state = 0;
//#ifdef CONFIG_BLINK_LED_RMT
# if 0
static led_strip_t *pStrip_a;
static void blink_led(void)
{
    // If the addressable LED is enabled
    if (s_led_state) {
        // Set the LED pixel using RGB from 0 (0%) to 255 (100%) for each color 
        pStrip_a->set_pixel(pStrip_a, 0, 16, 16, 16);
        // Refresh the strip to send data 
        pStrip_a->refresh(pStrip_a, 100);
    } else {
        //Set all LED off to clear all pixels 
        pStrip_a->clear(pStrip_a, 50);
    }
}

static void configure_led(void)
{
    /* LED strip initialization with the GPIO and pixels number*/
    pStrip_a = led_strip_init(CONFIG_BLINK_LED_RMT_CHANNEL, BLINK_GPIO, 1);
    /* Set all LED off to clear all pixels */
    pStrip_a->clear(pStrip_a, 50);
}

//#elif CONFIG_BLINK_LED_GPIO
# else
static void blink_led(void)
{
   //Set the GPIO level according to the state (LOW or HIGH)
    gpio_set_level(BLINK_GPIO, s_led_state);
   
}

static void configure_led(void)
{
    gpio_reset_pin(BLINK_GPIO);
    // Set the GPIO as a push/pull output 
    gpio_set_direction(BLINK_GPIO, GPIO_MODE_OUTPUT);
    gpio_set_direction(input_state, GPIO_MODE_INPUT);
}
#endif
static void task1(void)
{
    s_led_state=1;
    blink_led();

}
static void task2(void)
{
    s_led_state=0;

    
}

void app_main(void)
{
    /* Configure the peripheral according to the LED type */
    configure_led();

    while (1) {
        if(input_state==1) {
            task1();
        }
        else {
            task2();
            
        }
    }
}




